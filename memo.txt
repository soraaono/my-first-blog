【参考URL】
https://tutorial.djangogirls.org/ja/django_models/

manage.py
サイトの管理をするスクリプト
ローカル上でWebサーバーを起動するのに役立つ

settings.py
ウェブサイトの様々な設定

urls.py
urlsolverで使用されるパターンのリストが含まれている(ようわからん)

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
静的ファイルのパスを追加

ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
「.pythonanywhere.com」は、今後デブロイをして使うホストネーム

＊ホストネーム
一つのドメインの中にも様々なサーバーがある。どのサーバーかを示すのがホスト名。サーバーをホストという。

////////////////////////////
ここでの最終目標は、ブログサイトを作ること

まずは、ポストを管理するサイトを作る。(ポストは、投稿されたブログの最低限の情報？)

どんなオブジェクトが必要かを考えると、
title
text
author
created_date
published_date

以上のような要素を持つポストを作り、それをdjangoのpublishメソッドで公開するようにする。

////////////////////////////
djangoモデル

ポストの情報、ユーザーの情報はすべてデータベースで管理される。
////////////////////////////
blogというアプリケーションを作る

models.Model
djangoモデルであり、データベースに保存すべきであることを示す？？？
なぜ引数に来ている、、、。

それぞれの型について
models.CharField – 文字数が制限されたテキストを定義するフィールド
models.TextField – これは制限無しの長いテキスト用です。ブログポストのコンテンツに理想的なフィールドでしょ？
models.DateTimeField – 日付と時間のフィールド
models.ForeignKey – これは他のモデルへのリンク
詳しくは、(https://docs.djangoproject.com/ja/2.0/ref/models/fields/#field-types)参照

def　publish
公開して？その日付を保存する？

////////////////////////////
makemigration をして、Djangoに変更を知らせる(保存する？)
migrateをする

ホストモデルがデータベースに入った

////////////////////////////
スーパーユーザー
id:admin
pass:admin
////////////////////////
デブロイ
https://tutorial.djangogirls.org/ja/deploy/
次はここから













